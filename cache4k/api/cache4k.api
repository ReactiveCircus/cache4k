public abstract interface class io/github/reactivecircus/cache4k/Cache {
	public abstract fun asMap ()Ljava/util/Map;
	public abstract fun get (Ljava/lang/Object;)Ljava/lang/Object;
	public abstract fun get (Ljava/lang/Object;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun invalidate (Ljava/lang/Object;)V
	public abstract fun invalidateAll ()V
	public abstract fun put (Ljava/lang/Object;Ljava/lang/Object;)V
}

public abstract interface class io/github/reactivecircus/cache4k/Cache$Builder {
	public static final field Companion Lio/github/reactivecircus/cache4k/Cache$Builder$Companion;
	public abstract fun build ()Lio/github/reactivecircus/cache4k/Cache;
	public abstract fun eventListener (Lio/github/reactivecircus/cache4k/CacheEventListener;)Lio/github/reactivecircus/cache4k/Cache$Builder;
	public abstract fun expireAfterAccess-LRDsOJo (J)Lio/github/reactivecircus/cache4k/Cache$Builder;
	public abstract fun expireAfterWrite-LRDsOJo (J)Lio/github/reactivecircus/cache4k/Cache$Builder;
	public abstract fun maximumCacheSize (J)Lio/github/reactivecircus/cache4k/Cache$Builder;
	public abstract fun timeSource (Lkotlin/time/TimeSource;)Lio/github/reactivecircus/cache4k/Cache$Builder;
}

public final class io/github/reactivecircus/cache4k/Cache$Builder$Companion {
	public final fun invoke ()Lio/github/reactivecircus/cache4k/Cache$Builder;
}

public abstract interface class io/github/reactivecircus/cache4k/CacheEvent {
	public abstract fun getKey ()Ljava/lang/Object;
}

public final class io/github/reactivecircus/cache4k/CacheEvent$Created : io/github/reactivecircus/cache4k/CacheEvent {
	public fun <init> (Ljava/lang/Object;Ljava/lang/Object;)V
	public fun equals (Ljava/lang/Object;)Z
	public fun getKey ()Ljava/lang/Object;
	public final fun getValue ()Ljava/lang/Object;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/github/reactivecircus/cache4k/CacheEvent$Evicted : io/github/reactivecircus/cache4k/CacheEvent {
	public fun <init> (Ljava/lang/Object;Ljava/lang/Object;)V
	public fun equals (Ljava/lang/Object;)Z
	public fun getKey ()Ljava/lang/Object;
	public final fun getValue ()Ljava/lang/Object;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/github/reactivecircus/cache4k/CacheEvent$Expired : io/github/reactivecircus/cache4k/CacheEvent {
	public fun <init> (Ljava/lang/Object;Ljava/lang/Object;)V
	public fun equals (Ljava/lang/Object;)Z
	public fun getKey ()Ljava/lang/Object;
	public final fun getValue ()Ljava/lang/Object;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/github/reactivecircus/cache4k/CacheEvent$Removed : io/github/reactivecircus/cache4k/CacheEvent {
	public fun <init> (Ljava/lang/Object;Ljava/lang/Object;)V
	public fun equals (Ljava/lang/Object;)Z
	public fun getKey ()Ljava/lang/Object;
	public final fun getValue ()Ljava/lang/Object;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/github/reactivecircus/cache4k/CacheEvent$Updated : io/github/reactivecircus/cache4k/CacheEvent {
	public fun <init> (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
	public fun equals (Ljava/lang/Object;)Z
	public fun getKey ()Ljava/lang/Object;
	public final fun getNewValue ()Ljava/lang/Object;
	public final fun getOldValue ()Ljava/lang/Object;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class io/github/reactivecircus/cache4k/CacheEventListener {
	public abstract fun onEvent (Lio/github/reactivecircus/cache4k/CacheEvent;)V
}

public final class io/github/reactivecircus/cache4k/FakeTimeSource : kotlin/time/AbstractLongTimeSource {
	public fun <init> ()V
	public final fun plusAssign-LRDsOJo (J)V
}


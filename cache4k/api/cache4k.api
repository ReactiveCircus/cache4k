public abstract interface class io/github/reactivecircus/cache4k/Cache {
	public abstract fun asMap ()Ljava/util/Map;
	public abstract fun get (Ljava/lang/Object;)Ljava/lang/Object;
	public abstract fun get (Ljava/lang/Object;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun invalidate (Ljava/lang/Object;)V
	public abstract fun invalidateAll ()V
	public abstract fun put (Ljava/lang/Object;Ljava/lang/Object;)V
}

public abstract interface class io/github/reactivecircus/cache4k/Cache$Builder {
	public static final field Companion Lio/github/reactivecircus/cache4k/Cache$Builder$Companion;
	public abstract fun build ()Lio/github/reactivecircus/cache4k/Cache;
	public abstract fun expireAfterAccess-LRDsOJo (J)Lio/github/reactivecircus/cache4k/Cache$Builder;
	public abstract fun expireAfterWrite-LRDsOJo (J)Lio/github/reactivecircus/cache4k/Cache$Builder;
	public abstract fun fakeTimeSource (Lio/github/reactivecircus/cache4k/FakeTimeSource;)Lio/github/reactivecircus/cache4k/Cache$Builder;
	public abstract fun maximumCacheSize (J)Lio/github/reactivecircus/cache4k/Cache$Builder;
}

public final class io/github/reactivecircus/cache4k/Cache$Builder$Companion {
	public final fun invoke ()Lio/github/reactivecircus/cache4k/Cache$Builder;
}

public final class io/github/reactivecircus/cache4k/FakeTimeSource : kotlin/time/AbstractLongTimeSource {
	public fun <init> ()V
	public final fun plusAssign-LRDsOJo (J)V
}

